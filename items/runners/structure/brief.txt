# items/runners/structure/brief.txt
Project brief — CRT Structure Runner & Heroku Proxy
Scope & goal
Last: 2025-10-11
Snapshot v: 2025-10-11-03

Use a Heroku Node proxy to read/write content in the sportdogfood/clear-round-datasets repo for blog generation. Trigger the “Structure Runner” with a single task URL to render templates, build indexes, and commit outputs back — without ever overwriting source data. :contentReference[oaicite:1]{index=1}

Critical endpoints (must remain; do not modify or remove)
- POST /items/commit — Airtable writes into items/*
- POST /docs/commit — Single JSON file under docs/*
- POST /docs/commit-bulk — Multiple files under docs/* (html/xml/json)
- GET /docs/{path} — Read-through proxy

Non-negotiable env rules
- ALLOW_DIRS must ALWAYS include the full set (never narrowed) listed in the preamble (additive only)
- CORS allowlist must include Airtable domains: airtable.com, app.airtable.com, console.airtable.com
- UPSTREAM_BASE points to raw GitHub; manifest mode enabled

Inputs
- Task: items/blogs/desc-task-2025-10-02.json (contains canonical_base, add_post_link, images_link)
- Source post JSON (READ-ONLY): docs/blogs/.../*-blog-YYYY-MM-DD.json
- Images JSON: items/images/desc-images.json
- Optional datasets: events, venues, geometry, sections, brand audiences

Decisions locked in (naming & outputs)
- Source remains *-blog-YYYY-MM-DD.json (read-only)
- Runner produces sibling *-publish-YYYY-MM-DD.json (replace “-blog-”→“-publish-”, same folder)
- manifest.json’s `json` field MUST point to the publish JSON, not the source post JSON

Desired runner behavior (no wall-clock dependence)
1) Fetch task → fetch post JSON (+ images JSON; optional event/venue/geo/section)
2) Generate ONLY derived outputs:
   - docs/blogs/{venue}-blogs-{year}/{slug}/index.html
   - docs/blogs/index.html
   - docs/blogs/{year}/index.html
   - docs/blogs/manifest.json (upsert entry; json→publish file)
   - docs/blogs/rss.xml
   - docs/sitemap.xml
   - docs/blogs/{venue}-blogs-{year}/{slug}/{publish_slug}.json (publish JSON)
3) Commit atomically via /docs/commit-bulk
4) Never modify or overwrite any *-blog-*.json

Write rules (enforced)
- Forbid any write to paths matching *-blog-????-??-??.json → HALT 403
- WRITE ALLOWLIST ONLY (same as above list of outputs)
- Templates MUST read from the publish JSON only

Event enrichment (optional but supported)
- From event dataset: event_month, event_season, event_duration (free text), start_date, end_date
- Map event_duration → {single|weekend|multi-day}; compute archive_year from start_date when present
- Include these fields in the publish JSON for templates/manifest

Idempotency & safety
- idempotency_key = normalized(add_post_link)|archive_year|event_month|event_season|mapped(event_duration)|start_date|end_date
- Per-file no-op: skip if content hash unchanged
- Enforce content_type + min_bytes per file in bulk commit
- Deterministic outputs; no wall-clock values

What already works
- /docs/commit-bulk probe writes & reads back a payload when ALLOW_DIRS includes items,docs
- /items/commit returns 200s when items is present in ALLOW_DIRS :contentReference[oaicite:2]{index=2}

Recent pain points (root causes)
- Input/Output collision on same filename → accidental overwrite
- ALLOW_DIRS drift removed “items” → Airtable commits broke
- Missing bulk-commit guards → zero-byte writes “succeeded”
- No idempotency → repeated rewrites
- Ambiguous task contract → unclear write targets

Policy & schema alignment (current)
- policy.json: never_edit_post_json=true; publish_json_enabled=true; “-blog-”→“-publish-”; deterministic & atomic; manifest json_format uses {publish_slug}.json
- manifest.schema.json: required fields (slug, title, date, year, path, json, venue); docs clarify month/season provenance; duration mapping enum

Observability (minimum logs)
- idempotency_key, add_post_link, computed publish_path
- archive_year, event_month, event_season, mapped event_duration
- files attempted / written / skipped_noop

Status
- Rendering logic lives in runner + templates; proxy stays thin pass-through (no rendering in server.js)
- This brief is the reference for naming, routes, guards, and safety rules
