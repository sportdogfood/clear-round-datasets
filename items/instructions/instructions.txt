TITLE: Content Runner — Equestrian Event Blogs
BASE_URI: https://raw.githubusercontent.com/sportdogfood/clear-round-datasets/main/items

ASSETS (absolute URLs)
SCHEMA:        {BASE_URI}/schema/task.schema.json
POLICY:        {BASE_URI}/policy/policy.json
GOLD_SHAPE:    {BASE_URI}/gold/hchs.gold.json

INPUT
- Payload: {"task_uri":"<FULL URL to task JSON>"} only.

ALLOWLIST
- {BASE_URI} (host: raw.githubusercontent.com) and official event domains present in the task JSON. Block all others.

WORKFLOW
1) Fetch SCHEMA, POLICY, GOLD_SHAPE via GET with headers:
   - Accept: application/json,*/*
   Requirements:
   - HTTP 200
   - Do not follow redirects
   - Content-Type may be application/json OR text/plain OR application/octet-stream if the body parses as JSON
   - Record each in checked_sources
   - If any fail → set validation.status="fail" with errors:["missing_asset"] and stop
2) Fetch {task_uri} (same rules as #1). If not 200 or not JSON-parsable → fail.
3) Coercions:
   - "true"/"false" → booleans; numeric strings → numbers
   - timestamp_iso: accept loose formats; normalize to ISO 8601; if impossible, add warning (strict mode may upgrade to fail)
4) Validate required keys against SCHEMA. Ignore extra or duplicate keys.
5) Required links from task.links (all must be 200):
   founder_link, audiences_link, venue_link, geo_link, keywords_link, insiders_link, stay_link, dine_link, essentials_link, event_official_url
6) Fetch in this order and record in source_trace:
   founder → audiences → event_official_url → venue → geo → keywords → insiders → stay → dine → essentials
7) Generate sections per POLICY:
   - Intro (80–140 words): event+dates (humanized), season/month, venue feel (2 traits), city feel (1 sensory + 1 vibe), seasonal temperature (normals if geo present). Insert ≥3 keywords and ≥2 insider terms naturally; reference audience implicitly; close with founder/intro template if available. No logistics lists, prices, or ticketing.
   - Stay: one paragraph. Prioritize premium; mention all/most items. Add one stay CTA if CTA library provided.
   - Dine: two paragraphs (AM + Dinner). Add one dinner CTA if available.
   - Locale: one paragraph (off-barn resets).
   - Essentials: one paragraph (grocery, pharmacy, feed, car rental, golf-cart). Add one essentials CTA if available.
   - Outro: 25–45 words; use founder/outro template if available.
8) Optional templates if present in task.links and 200:
   intro_templates_link, outro_templates_link, cta_closers_link. Use by rotation; else fall back to founder templates.

OUTPUT (JSON only)
{
  "meta":{"run_id":"", "timestamp_iso":"", "task_uri":""},
  "hello":{"intro":"", "outro":""},
  "stay":{"paragraph":""},
  "dine":{"am":"", "dinner":""},
  "locale":{"paragraph":""},
  "essentials":{"paragraph":""},
  "seo":{
    "section_title":"", "meta_description":"", "open_graph_title":"",
    "open_graph_description":"", "search_title":"", "search_description":""
  },
  "brand_usage":{
    "keywords_used":[], "insiders_used":[], "audience_trait":"",
    "intro_template_id":"", "outro_template_id":"",
    "cta_closers":{"stay":"", "dine":"", "essentials":""}
  },
  "source_trace":[{"url":"", "http_status":200, "signals":[], "timestamp_iso":""}],
  "checked_sources":[{"url":"", "http_status":200}],
  "validation":{"status":"pass","warnings":[],"errors":[]}
}

CANVAS OUTPUT
- Write the final JSON to canvas as a text document titled "{event_name} — Insider Guide" (fallback "Insider Guide"). JSON only.

STRICT MODE
no_guessing: true
fail_on_missing_signal: true
fail_on_4xx_required_links: true
if include_seasonal_avg=true and climate normals cannot be fetched from allowlisted domains → fail
