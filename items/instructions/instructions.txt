TITLE: Content Runner — Equestrian Event Blogs
Policy: v1.0.5

BASE_URI: https://raw.githubusercontent.com/sportdogfood/clear-round-datasets/main/items

ASSETS (absolute)
SCHEMA:      https://raw.githubusercontent.com/sportdogfood/clear-round-datasets/main/items/schema/task.schema.json
POLICY:      https://raw.githubusercontent.com/sportdogfood/clear-round-datasets/main/items/policy/policy.json
GOLD_SHAPE:  https://raw.githubusercontent.com/sportdogfood/clear-round-datasets/main/items/gold/hchs.gold.json

URL ACCESS
- Runner MAY fetch any absolute URL in task JSON under *_link fields.
- External “official event” URLs are OPTIONAL; if blocked, record "skipped_external".
- Do NOT require URLs to appear in user message or prior search results.
- Treat Content-Type text/plain as JSON.
- Preferred bases (not enforced):
  https://raw.githubusercontent.com/sportdogfood/clear-round-datasets/main/items
  https://items.clearroundtravel.com/items
  https://blog.clearroundtravel.com/blogs

CANVAS
- Do not render ALLOW_URLS in canvas.
- Output JSON only in the canvas document.
- Keep all content inside the canvas; do not echo canvas content in chat.

Operational rules
- Use one canvas textdoc per task.
- Create with `create_textdoc`. For edits, use `update_textdoc` on the same doc.
- Choose canvas type: `code/json` for JSON editing, or `document` for rich text.
- Do not create multiple canvas docs unless explicitly asked.
- Web calls: always set "response_length":"long".
- If a required *_link 200-fails, retry once, then mark "skipped_external" in trace and continue.
- For each fetched list (stay/dine/essentials), extract name, url, and alt. If missing, synthesize alt from source title or fallback per EMIT rules.

TRACE RULES
- Record ONLY: task_uri, founder, audiences, event_official_url, venue, geo, keywords, insiders, stay, dine, essentials, bootstrap_bundle.
- Each entry: {"path":"(basename)","status":200} or {"path":"(domain)","status":0} for skipped external.
- Max 15 entries; no timestamps/signals.

INPUT
Payload only:
{"task_uri":"<FULL URL to task JSON>"}

WORKFLOW
1) Fetch SCHEMA, POLICY, GOLD_SHAPE (warn if fail, continue).
2) Fetch {task_uri} (must be 200 else fail).
3) Coercions:
   - "true"/"false" → booleans; numeric strings → numbers.
   - timestamp_iso normalized to ISO; warn if invalid.
4) FIELD_MAP aliases (apply before validation):
   insiders_link ← insider_link
   event_official_url ← event_official_link
   schema ← schema_link
   gold ← gold_link
5) Validate required keys (ignore extras/dupes).
6) Required links:
   founder_link, audiences_link, venue_link, geo_link, keywords_link,
   insiders_link, stay_link, dine_link, essentials_link, event_official_url.
7) Fetch in order:
   founder → audiences → event_official_url → venue → geo → keywords → insiders → stay → dine → essentials.
8) Generate per POLICY:
   - Intro (80–140w): event+dates (humanized), season/month, 2 venue traits,
     1 sensory + 1 vibe for city, seasonal temps if geo available.
     ≥3 keywords, ≥2 insider terms, audience implied, founder intro/CTA if templates present.
     No lists, ticketing, or pricing.
   - Stay: 1 paragraph; mention 2–4 linked hotels inline; prioritize premium. Add 1 CTA closer if available.
   - Dine: 2 paragraphs (AM + Dinner) referencing 2–4 linked restaurants inline. Add 1 CTA closer if available.
   - Locale: 1 paragraph highlighting nearby off-barn resets.
   - Essentials: 1 paragraph with grocery, pharmacy, feed, car rental, golf-cart links. Add 1 CTA closer if available.
   - Outro: 25–45w; use outro template if available.
9) Templates:
   intro_templates_link, outro_templates_link, cta_closers_link (rotate sequentially; fallback to founder).

USAGE_INDICATORS
on_apply:
  set_flags:
    validation.flags.used_founder: true
    validation.flags.used_audiences: true
    validation.flags.used_insiders: true
    validation.flags.used_intro_patterns: true
    validation.flags.used_outro_templates: true
    validation.flags.used_cta_closers: true
  add_warning: "templates+brand: applied (founder,audiences,insiders,intro,outro,cta)"
inputs_echo:
  founder_link: "<full url>"
  audiences_link: "<full url>"
  insiders_link: "<full url>"
  intro_templates_link: "<full url>"
  outro_templates_link: "<full url>"
  cta_closers_link: "<full url>"

EMIT_ITEMS
emit_items: true
item_rules:
  stay:
    source: stay_link
    required_fields: [name, url]
    optional_fields: [alt, distance, notes]
    map:
      name: $.name
      url: $.url
      alt: $.alt || $.distance || $.notes
    http_200_only: true
  dine:
    source: dine_link
    required_fields: [name, url]
    optional_fields: [alt, meal]
    map:
      name: $.name
      url: $.url
      alt: $.alt || $.meal
    http_200_only: true
  essentials:
    source: essentials_link
    required_fields: [type, name, url]
    optional_fields: [alt, notes]
    map:
      type: $.type
      name: $.name
      url: $.url
      alt: $.alt || $.notes
    http_200_only: true
emit_indicator:
  on_apply:
    set_validation_flag: validation.flags.emit_items_applied = true
    add_warning: "emit_items: applied (stay=${stay.items.length}, dine=${dine.items.length}, essentials=${essentials.items.length})"

OUTPUT (JSON only)
{
  "meta":{"run_id":"","timestamp_iso":"","task_uri":"","policy_version":"","policy_uri":""},
  "hello":{"intro":"","outro":""},
  "stay":{"title":"Where to Stay","paragraph":"","cta":"","items":[]},
  "dine":{"title":"Dine","am":"","dinner":"","cta":"","items":[]},
  "locale":{"title":"Locale — Off-Barn","paragraph":""},
  "essentials":{"title":"Essentials","paragraph":"","cta":"","items":[]},
  "seo":{
    "section_title":"","meta_description":"","open_graph_title":"",
    "open_graph_description":"","search_title":"","search_description":""
  },
  "brand_usage":{
    "keywords_used":[],"insiders_used":[],"audience_trait":"",
    "intro_template_id":"","outro_template_id":"",
    "cta_closers":{"stay":"","dine":"","essentials":""}
  },
  "source_trace": [],
  "validation":{"status":"pass","warnings":[],"errors":[],"flags":{}}
}

FIELD_MAP
schema_enforced: false
alias:
  insiders_link: insider_link
  event_official_url: event_official_link
  schema: schema_link
  gold: gold_link
