# Cards Core & Task Rails — v1
# Scope: small, operator-led system for events, places, content, and indices
# Last updated: 2025-09-04 (America/New_York)

Purpose
-------
Define the common “card” model and shared rails so all tasks (add-event, add-location, research, refresh, index, curate, render) stay consistent and small. Facts-only in entities; content tone/POV lives only in content cards.

Card Families
-------------
- Entities: events (hub + legs), venues, places (hotels, airbnbs, rvparks, restaurants, sites, parks), organizers.
- Normalizers (read-only): years, seasons, months, weeks, days; countries, states, cities; airports, weather.
- Content (agnostic): editorial cards that target entities by *_uid.
- Tags: curated label cards only (no computed facets here).

Cards: Shared Core (minimal, reusable)
--------------------------------------
All records (where applicable) share the core below to keep tooling generic:
- `*_uid` (primary id), `display_name`
- `created_date`, `last_updated` (ET, ISO; `YYYY-MM-DD`)
- `source_uids` (domain-slug policy; HTTPS official sources)
- `label_uids` (curated only; no computed facets)
- `city_uid?`, `state_uid?`, `country_uid?` (when locational)
- `notes?` (facts-only; no tone/POV; operator remarks)

Booleans & Dates
----------------
- Booleans: `"y"|"n"` only.
- Dates: `YYYY-MM-DD` (accept `YYYY-MM` as a hint only; confirm day before write).
- Timezone: `America/New_York` for comparisons and derived status.

UIDs & Filenames (deterministic)
--------------------------------
- **Events:** stripped `event_uid` (no venue/organizer/sponsor/rating/year).  
  **Filenames:** `{organizer_uid}-{event_uid}.json` (flat). Append `-YEAR` only on collision.
- **Venues:** `venue_uid` must end with `-venue`. **Filename == UID**.
- **Places (non-venue):** `place_uid = slug(name)`; on collision append city/state/country stem. **Filename == UID**.
- **Content:** `content_uid = topic-slug` (e.g., `hotels-walking-distance`). **Filename == UID**.

Events (time-centric hub + legs)
--------------------------------
- Hub defines the macro window; **legs** are discrete sub-windows **inside** hub.
- Leg naming: `"Leg N"` (never “Week”), non-overlapping, ordered.
- Required relations: `venue_uid` (must end `-venue`), `organizer_uid`; plus `source_uids`.
- Derived examples: `yyyymm`, `event_duration`, `event_current_status` (vs today), `days_until_start/end`, `event_estimated_next_start_date` (if annual). Never overwrite inputs.

Venue Gate (strict, shared)
---------------------------
- Any binding to a venue uses: **confirm / input / exit**. Never guess.
- Accept `venue_uid` **or** `venue_hint` → resolve to UID (operator confirms).
- `venue_uid` must end with `-venue`.

Places (non-venue)
------------------
- Place types: `hotel | airbnb | rvpark | restaurant | site | park`.
- Share the same rails: HTTPS official link, location normalizers, curated labels, `source_uids`.
- Optional proximity: `primary_venue_uid?`, `near_venue_uids?` (must end `-venue`).

Labels vs Derived (clean boundary)
----------------------------------
- `label_uids` = curated, stable tags only.
- Computed facets (e.g., “walking-distance”, “under-30min”) belong in **indices**, not in records.

Indices (read-only artifacts)
-----------------------------
- Stored under `items/index/` (files like `events.index.js`, `places.index.js`, `content.index.js`).
- Facets emitted in one pass:
  - **by_time:** `byYear`, `byMonth`, `bySeason`, `byWeek`, `next7d`, `next30d`
  - **by_location:** `byCity`, `byState`, `byCountry`
  - **by_relation:** `byVenue`, `byOrganizer`
  - **by_label:** `label_uid → [card_uids]`
- Indices are derived; do not alter records.

Routines (independent)
----------------------
- **refresh-derived-card-data:** recompute derived fields (facts-only). Touch only changed fields; never overwrite inputs.
- **index-cards:** rebuild all indices across families into `items/index/`.
- **reminders:** compute upcoming windows from indices (no writes).
- **curate-content:** build bindings between content and entities via `*_uid` / `*_uids`.
- **render-content:** emit md/blocks for site from approved binds.

Sources (domain-first)
----------------------
- `source_uid = domain_slug` (lowercase primary domain; dots→hyphens, e.g., `usef.org → usef-org`).
- `source_type_hint`: first path token or key (`"/"`, `"events"`, `"search"`, `"ShowGUID"`).
- Flags: `is_official: "y|n"`, `is_favorite: "y|n"`.
- Keep one source record per domain; attach multiple links as needed in card `source_uids`.

Failure Modes (stop conditions)
-------------------------------
- `needs_rules`: required rule file missing/unreadable.
- `needs_review`: official link/name/dates ambiguous or conflicting.
- `needs_source`: required `source_uids` missing.
- `needs_normalizer`: referenced normalizer or relation missing.
- `invalid_geo` / `invalid_timezone`: out of range or non-IANA.
- `no_ad_hoc_values`: do not invent values; leave empty + note.
- Facts-only enforced for all entity/place cards.

Task Rails (applies to every builder)
-------------------------------------
- **Inputs are hints.** Confirm via proxyed official sources; stop on first failed GET and report the full URL.
- **Preview → Commit handshake.** PREVIEW returns full file(s) + target `path`; operator replies `COMMIT / EDIT / CANCEL`.
- **Venue gate** enforced wherever a venue is bound.
- **Series control:** `is_series ∈ { "y", "n", "auto" }`; guards: legs inside hub, non-overlapping, `"Leg N"`.
- **Labels curated;** computed facets go to indices.
- **No code in chat** unless the operator explicitly asks for a full-drop file.

Session Hygiene (see knowledge/README)
--------------------------------------
- Start each session with the one-line session-start (proxy URL + manifest path + overrides).
- Verify health + manifest + rule files; if any GET fails, stop and report the exact URL.

Change Control
--------------
- This file is canonical for the card model and rails.
- Update via small PR; keep concise; link from knowledge/README.
