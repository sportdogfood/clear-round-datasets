# output-behavior.txt
# Clear Round Travel - Kernel & Agents
# Version: v1
# Last updated: 2025-09-01

Purpose
-------
Defines exactly what each domain returns and how writes are performed.
This keeps Humans, the Agent, and Codex aligned on PREVIEW -> COMMIT.

Domains and contracts
---------------------
ADD (data-write)
- Emits a PREVIEW first. No write until Human issues COMMIT.
- PREVIEW shows the full planned writes as complete file payloads (not patches).
- Lane is YELLOW by default; see permissions-policy for overrides.

UPDATE (data-write)
- Emits a PREVIEW first. No write until Human issues COMMIT.
- PREVIEW includes before/after summary and diff counts.
- Lane depends on changed fields; see permissions-policy.

RESEARCH (no write)
- Returns facts-only JSON. No commit path. Include minimal source hints.

QUERY (no write)
- Returns lists, counts, simple objects. No commit path.

CREATE (no write)
- Returns content as JSON or Markdown per task schema. No commit path.

REMINDERS (no write)
- Returns schedule JSON (RRULE or explicit times). No commit path.

PREVIEW envelope (all write-capable tasks)
------------------------------------------
type: PREVIEW
lane: green | yellow | red
writes: [
  {
    op: add | update,
    path: <repo path>,
    base_sha: <optional sha if file exists>,
    payload: { ...full file content... },
    notes: [ "assumptions or deferrals" ]
  }
]
summary: { adds: N, updates: M, total: N+M, risks: [ ... ] }

COMMIT envelope (proxy request)
-------------------------------
POST {proxy_base}/items/commit
body: { path: <path>, json: { ...full file content... }, message: "<commit message>" }
success: { "commit": { "sha": "..." } }
error:   { "error": "<code>", "message": "...", "detail": { ... } }

Conflict behavior (Agent/Codex)
-------------------------------
- If file changed since PREVIEW (sha or content), do not write. Return conflict and re-run PREVIEW.

Examples (illustrative, not prescriptive)
-----------------------------------------

ADD: add-event (non-series)
- Input: "Add Event hampton-classic-f34k"
- PREVIEW:
  type: PREVIEW
  lane: yellow
  writes:
    - op: add
      path: index/events/hampton-classic-horse-show-2025-08-24.json
      payload: { ...complete event JSON... }
  summary: { adds: 1, updates: 0, total: 1 }

ADD: add-event (season hub + legs, same directory)
- Input: "Add Event desert-desert-circuit-series-tzsx"
- PREVIEW:
  type: PREVIEW
  lane: yellow
  writes:
    - op: add
      path: index/events/desert-desert-circuit-2025-01-21.json      # hub (full span)
      payload: { ...hub JSON... }
    - op: add
      path: index/events/desert-desert-circuit-2025-01-21.json      # leg 1 (yyyy-mm-dd)
      payload: { ...leg JSON (leg_flag: y, label: Week 1)... }
    - op: add
      path: index/events/desert-desert-circuit-2025-01-28.json      # leg 2
      payload: { ... }
    - ...
  summary: { adds: 11, updates: 0, total: 11, risks: [] }
- Note: no separate event-series entity; both hub and legs live under index/events/.

UPDATE: update-event (safe copy tweak)
- Input: "Update Event hampton-classic-horse-show-2025-08-24 set description"
- PREVIEW:
  type: PREVIEW
  lane: yellow
  writes:
    - op: update
      path: index/events/hampton-classic-horse-show-2025-08-24.json
      base_sha: <sha>
      payload: { ...complete JSON with updated description... }
      notes: []
  summary: { adds: 0, updates: 1, total: 1 }

RESEARCH: research-hotels (no write)
- Output (facts-only):
  {
    "type": "facts",
    "query": "hotels near Wellington International",
    "items": [
      { "name": "Hotel A", "distance_km": 7.2, "link": "https://...", "notes": "free parking" }
    ],
    "retrieved_at": "2025-09-01T12:00:00Z",
    "sources": [ "example-site.com", "example-hotel.com" ]
  }

QUERY: events-upcoming (no write)
- Output:
  {
    "items": [
      { "event_uid": "hampton-classic-horse-show-2025-08-24", "start_date": "2025-08-24" },
      { "event_uid": "winter-equestrian-festival-2026-01-05", "start_date": "2026-01-05" }
    ],
    "count": 2
  }

CREATE: create-section-content (no write)
- Output (example Markdown):
  {
    "format": "markdown",
    "title": "Getting There",
    "body": "Fly into PBI (nonstop from major hubs). Drive time to Wellington is 25-35 minutes in normal traffic. Rideshare pickup is at the designated zone near baggage claim..."
  }

REMINDERS: daily-due (no write)
- Output:
  {
    "schedule": {
      "rrule": "FREQ=DAILY;BYHOUR=9;BYMINUTE=0;BYSECOND=0",
      "timezone": "America/New_York"
    },
    "message": "Daily checklist: confirm ring schedules and weather snapshot."
  }

Notes
-----
- All example paths must be within ALLOW_DIRS. The Agent should refuse to COMMIT outside the allowlist.
- For multi-file writes, prefer one PR containing all files for that task unless lane elevation requires splitting.
- Do not emit patches; always emit complete final files in PREVIEW and COMMIT.
